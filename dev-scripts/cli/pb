#!/bin/bash

CURRENT_DIR="$(cd "$(dirname "$0")" && pwd)"

# ask for pb-core repo
. "${CURRENT_DIR}/../dev-core.sh"

# Pull `pb-core/dev` on `pb-core` branch and push `pb-core` on `origin/pb-core`
if [ "$1" = "update" ]; then
    if [ "$(git rev-parse --abbrev-ref HEAD)" = "pb-core" ]; then
        git tag pb-backup-before-update

        git pull --rebase pb-core "$pb_branch"
        git fetch pb-core
        read -p "Everything went well ? Push on 'origin' [Y/n] ? " push;

        if [ "$push" = "n" ]; then
            git reset --hard pb-backup-before-update
            echo 'Update aborted.'
        else
            git push origin pb-core
        fi

        git tag -d pb-backup-before-update
    else
        echo "Error: Not on branch 'pb-core'"
    fi

# Push pb-core on origin/pb-core and pb-core/dev
# Don't use this command if you're not a Phonegap Boilerplate maintainer
elif [ "$1" = "push" ]; then
    git push pb-core pb-core:dev
    git push origin pb-core:pb-core


# Merge pb-core on the current branch
elif [ "$1" = "merge" ]; then
    read -p "Merge 'pb-core' on '$(git rev-parse --abbrev-ref HEAD)' [y/N] ? " merge;
    if [ "$merge" = 'y' ]; then
        git merge --no-commit pb-core;
    else
        echo 'Merge aborted.';
    fi

# Fetch the pb-core remote
elif [ "$1" = "fetch" ]; then
    git fetch pb-core

else
    echo "Usage:"
    echo "* pb update (on the 'pb-core' branch): pulls the changes and pushes them on 'origin'"
    echo "* pb merge (on the target branch): merges in the branch pb-core"
    echo "* pb push (on the 'pb-core' branch): pushes the changes on 'origin/pb-core' and 'pb-core/dev'"
    echo "* pb fetch: fetch the pb-core remote"
fi
