!function(t,i){"function"==typeof define&&define.amd?define(["jquery"],i):"object"==typeof exports?module.exports=i(require("jquery")):t.PageSlider=i(t.jQuery)}(this,function(t){"use strict";var i=function(t){this.$container=t,t.css({height:"100%",width:"100%",overflow:"hidden"})};return i.prototype={constructor:i,$container:null,transitionsEnabled:!0,transitionDurationMs:300,stateHistory:[],$currentPage:null,_setPagePosition:function(t,i){var n="0px";switch(i){case"left":n="-100%";break;case"right":n="100%"}var e="translate3d("+n+", 0px , 0px)";t.css({webkitTransform:e,transform:e})},_jQueryArrayToCollection:function(i){if(i instanceof t)return i;var n=t();return i.forEach(function(t){n=n.add(t)}),n},_enableTransitionOnPages:function(t){t=this._jQueryArrayToCollection(t),t.css({webkitTransitionDuration:this.transitionDurationMs+"ms",transitionDuration:this.transitionDurationMs+"ms"})},_disableTransitionOnPages:function(t){t=this._jQueryArrayToCollection(t),t.css({webkitTransform:"none",transform:"none",webkitTransitionDuration:"0s",transitionDuration:"0s"})},setTransitionDurationMs:function(t){this.transitionDurationMs=t},disableTransitions:function(){this.transitionsEnabled=!1},enableTransitions:function(){this.transitionsEnabled=!0},getSlideOriginForLocation:function(t){var i=this.stateHistory.length;return 0===i||t===this.stateHistory[i-1]?null:t===this.stateHistory[i-2]?"left":"right"},getNextSlideOrigin:function(){return this.getSlideOriginForLocation(location.hash)},slidePage:function(t,i){var n=location.hash,e=this.getNextSlideOrigin();switch(e){case"left":this.stateHistory.pop(),this.slidePageFrom(t,"left",i);break;case"right":this.stateHistory.push(n),this.slidePageFrom(t,"right",i);break;default:this.stateHistory.push(n),this.slidePageFrom(t,null,i)}},slidePageFrom:function(i,n,e){var s=this;e=e||{},e.beforeTransition=e.beforeTransition||t.noop,e.afterTransition=e.afterTransition||t.noop;var r=this.$currentPage,o=!r;if(i.addClass("page"),this.$container.append(i),e.beforeTransition(),o||!n||!this.transitionsEnabled)return this._disableTransitionOnPages(i),r&&r.remove(),this.$currentPage=i,void e.afterTransition(o);this._setPagePosition(i,n);var a=setTimeout(function(){u()},this.transitionDurationMs+100);this.$currentPage.one("transitionend webkitTransitionEnd",function(){u()}),this._enableTransitionOnPages([i,r]),this.$container[0].offsetWidth,this._setPagePosition(i,"center"),this._setPagePosition(r,"left"===n?"right":"left"),this.$currentPage=i;var u=function(){s._disableTransitionOnPages(s.$currentPage),s.$container.find("> .page:not(:last)").remove(),clearTimeout(a),e.afterTransition(!1)}}},i});
//# sourceMappingURL=data:application/json;base64,